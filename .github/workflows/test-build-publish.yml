# This workflow will run unit and static test, build and upload
# a Python Package to PyPI
---
name: test-build-publish

on: [push, pull_request]

permissions:
  contents: read

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - '3.10'
          - '3.11'
          - '3.12'
          - '3.13'
          - '3.14-dev'
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          uv sync --extra tests
      - name: Test with pytest
        run: |
          uv run pytest tests --cov=tests --cov=PROJECT_NAME --cov-report=xml
      - name: "Upload coverage to Codecov"
        if: ${{ matrix.python-version==3.12 }}
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          verbose: true
          token: ${{ secrets.CODECOV_TOKEN }}

  static-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Install dependencies
        run: |
          uv sync --all-extras
      - name: Typecheck
        run: |
          uv run mypy src/PROJECT_NAME tests
      - name: Linting
        run: |
          uv run flake8 src/PROJECT_NAME tests --max-line-length=88
          uv run ruff check --no-fix src/PROJECT_NAME tests
          uv run ruff format --check src/PROJECT_NAME tests
          uv run yamllint .github/workflows/
      - name: Check complexity
        run: |
          uv run radon cc --min B src/PROJECT_NAME
          uv run radon mi --min B src/PROJECT_NAME
          uv run lizard -l python -w src/PROJECT_NAME

  build-and-check-package:
    name: Build & inspect our package.
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: hynek/build-and-inspect-python-package@v2
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
      - uses: hynek/build-and-inspect-python-package@v2
      - uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"
      - name: Check with pyroma
        run: |
          uv tool run pyroma .
      - name: Check tag name
        if: >-
          github.event_name == 'push' &&
          startsWith(github.ref, 'refs/tags')
        run: |
          uv tool run vercheck $GITHUB_REF_NAME src/PROJECT_NAME/about.py


  test-publish:
    if: >-
        github.event_name == 'push' &&
        github.repository == 'PROJECT_OWNER/PROJECT_NAME' &&
        startsWith(github.ref, 'refs/tags')
    needs: [build-and-check-package, unit-tests, static-tests]
    name: Test install on TestPyPI
    runs-on: ubuntu-latest
    environment: test-release
    permissions:
      id-token: write
    steps:
      - name: Download packages built by build-and-check-package
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist

      - name: Upload package to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish:
    if: >-
      github.event_name == 'push' &&
      github.repository == 'PROJECT_OWNER/PROJECT_NAME' &&
      github.ref == 'refs/heads/main'
    needs: [build-and-check-package, unit-tests, static-tests]
    name: Publish to PyPI
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
    steps:
      - name: Download packages built by build-and-check-package
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist

      - name: Publish distribution ðŸ“¦ to PyPI for push to main
        uses: pypa/gh-action-pypi-publish@release/v1
...
